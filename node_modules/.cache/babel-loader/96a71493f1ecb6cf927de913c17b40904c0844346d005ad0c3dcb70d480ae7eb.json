{"ast":null,"code":"import add from \"../add/index.js\";\nimport differenceInDays from \"../differenceInDays/index.js\";\nimport differenceInHours from \"../differenceInHours/index.js\";\nimport differenceInMinutes from \"../differenceInMinutes/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport differenceInYears from \"../differenceInYears/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @param {Interval} interval - the interval to convert to duration\n *\n * @returns {Duration} The duration Object\n * @throws {TypeError} Requires 2 arguments\n * @throws {RangeError} `start` must not be Invalid Date\n * @throws {RangeError} `end` must not be Invalid Date\n * @throws {RangeError} The start of an interval cannot be after its end\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\n\nexport default function intervalToDuration(interval) {\n  requiredArgs(1, arguments);\n  var start = toDate(interval.start);\n  var end = toDate(interval.end);\n  if (isNaN(start.getTime())) throw new RangeError('Start Date is invalid');\n  if (isNaN(end.getTime())) throw new RangeError('End Date is invalid');\n  if (start > end) {\n    throw new RangeError('The start of an interval cannot be after its end');\n  }\n  var duration = {\n    years: differenceInYears(end, start)\n  };\n  var remainingMonths = add(start, {\n    years: duration.years\n  });\n  duration.months = differenceInMonths(end, remainingMonths);\n  var remainingDays = add(remainingMonths, {\n    months: duration.months\n  });\n  duration.days = differenceInDays(end, remainingDays);\n  var remainingHours = add(remainingDays, {\n    days: duration.days\n  });\n  duration.hours = differenceInHours(end, remainingHours);\n  var remainingMinutes = add(remainingHours, {\n    hours: duration.hours\n  });\n  duration.minutes = differenceInMinutes(end, remainingMinutes);\n  var remainingSeconds = add(remainingMinutes, {\n    minutes: duration.minutes\n  });\n  duration.seconds = differenceInSeconds(end, remainingSeconds);\n  return duration;\n}","map":{"version":3,"names":["add","differenceInDays","differenceInHours","differenceInMinutes","differenceInMonths","differenceInSeconds","differenceInYears","toDate","requiredArgs","intervalToDuration","interval","arguments","start","end","isNaN","getTime","RangeError","duration","years","remainingMonths","months","remainingDays","days","remainingHours","hours","remainingMinutes","minutes","remainingSeconds","seconds"],"sources":["/Users/ksphdinhquy/Desktop/IT/checkinConUDSMP/node_modules/date-fns/esm/intervalToDuration/index.js"],"sourcesContent":["import add from \"../add/index.js\";\nimport differenceInDays from \"../differenceInDays/index.js\";\nimport differenceInHours from \"../differenceInHours/index.js\";\nimport differenceInMinutes from \"../differenceInMinutes/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport differenceInYears from \"../differenceInYears/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @param {Interval} interval - the interval to convert to duration\n *\n * @returns {Duration} The duration Object\n * @throws {TypeError} Requires 2 arguments\n * @throws {RangeError} `start` must not be Invalid Date\n * @throws {RangeError} `end` must not be Invalid Date\n * @throws {RangeError} The start of an interval cannot be after its end\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\n\nexport default function intervalToDuration(interval) {\n  requiredArgs(1, arguments);\n  var start = toDate(interval.start);\n  var end = toDate(interval.end);\n  if (isNaN(start.getTime())) throw new RangeError('Start Date is invalid');\n  if (isNaN(end.getTime())) throw new RangeError('End Date is invalid');\n\n  if (start > end) {\n    throw new RangeError('The start of an interval cannot be after its end');\n  }\n\n  var duration = {\n    years: differenceInYears(end, start)\n  };\n  var remainingMonths = add(start, {\n    years: duration.years\n  });\n  duration.months = differenceInMonths(end, remainingMonths);\n  var remainingDays = add(remainingMonths, {\n    months: duration.months\n  });\n  duration.days = differenceInDays(end, remainingDays);\n  var remainingHours = add(remainingDays, {\n    days: duration.days\n  });\n  duration.hours = differenceInHours(end, remainingHours);\n  var remainingMinutes = add(remainingHours, {\n    hours: duration.hours\n  });\n  duration.minutes = differenceInMinutes(end, remainingMinutes);\n  var remainingSeconds = add(remainingMinutes, {\n    minutes: duration.minutes\n  });\n  duration.seconds = differenceInSeconds(end, remainingSeconds);\n  return duration;\n}"],"mappings":"AAAA,OAAOA,GAAG,MAAM,iBAAiB;AACjC,OAAOC,gBAAgB,MAAM,8BAA8B;AAC3D,OAAOC,iBAAiB,MAAM,+BAA+B;AAC7D,OAAOC,mBAAmB,MAAM,iCAAiC;AACjE,OAAOC,kBAAkB,MAAM,gCAAgC;AAC/D,OAAOC,mBAAmB,MAAM,iCAAiC;AACjE,OAAOC,iBAAiB,MAAM,+BAA+B;AAC7D,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,YAAY,MAAM,+BAA+B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,kBAAkBA,CAACC,QAAQ,EAAE;EACnDF,YAAY,CAAC,CAAC,EAAEG,SAAS,CAAC;EAC1B,IAAIC,KAAK,GAAGL,MAAM,CAACG,QAAQ,CAACE,KAAK,CAAC;EAClC,IAAIC,GAAG,GAAGN,MAAM,CAACG,QAAQ,CAACG,GAAG,CAAC;EAC9B,IAAIC,KAAK,CAACF,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,IAAIC,UAAU,CAAC,uBAAuB,CAAC;EACzE,IAAIF,KAAK,CAACD,GAAG,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,IAAIC,UAAU,CAAC,qBAAqB,CAAC;EAErE,IAAIJ,KAAK,GAAGC,GAAG,EAAE;IACf,MAAM,IAAIG,UAAU,CAAC,kDAAkD,CAAC;EAC1E;EAEA,IAAIC,QAAQ,GAAG;IACbC,KAAK,EAAEZ,iBAAiB,CAACO,GAAG,EAAED,KAAK;EACrC,CAAC;EACD,IAAIO,eAAe,GAAGnB,GAAG,CAACY,KAAK,EAAE;IAC/BM,KAAK,EAAED,QAAQ,CAACC;EAClB,CAAC,CAAC;EACFD,QAAQ,CAACG,MAAM,GAAGhB,kBAAkB,CAACS,GAAG,EAAEM,eAAe,CAAC;EAC1D,IAAIE,aAAa,GAAGrB,GAAG,CAACmB,eAAe,EAAE;IACvCC,MAAM,EAAEH,QAAQ,CAACG;EACnB,CAAC,CAAC;EACFH,QAAQ,CAACK,IAAI,GAAGrB,gBAAgB,CAACY,GAAG,EAAEQ,aAAa,CAAC;EACpD,IAAIE,cAAc,GAAGvB,GAAG,CAACqB,aAAa,EAAE;IACtCC,IAAI,EAAEL,QAAQ,CAACK;EACjB,CAAC,CAAC;EACFL,QAAQ,CAACO,KAAK,GAAGtB,iBAAiB,CAACW,GAAG,EAAEU,cAAc,CAAC;EACvD,IAAIE,gBAAgB,GAAGzB,GAAG,CAACuB,cAAc,EAAE;IACzCC,KAAK,EAAEP,QAAQ,CAACO;EAClB,CAAC,CAAC;EACFP,QAAQ,CAACS,OAAO,GAAGvB,mBAAmB,CAACU,GAAG,EAAEY,gBAAgB,CAAC;EAC7D,IAAIE,gBAAgB,GAAG3B,GAAG,CAACyB,gBAAgB,EAAE;IAC3CC,OAAO,EAAET,QAAQ,CAACS;EACpB,CAAC,CAAC;EACFT,QAAQ,CAACW,OAAO,GAAGvB,mBAAmB,CAACQ,GAAG,EAAEc,gBAAgB,CAAC;EAC7D,OAAOV,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}