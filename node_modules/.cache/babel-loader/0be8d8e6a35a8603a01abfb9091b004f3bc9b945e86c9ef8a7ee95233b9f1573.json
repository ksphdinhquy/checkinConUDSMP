{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { isLeapYearIndex, parseNDigits, parseNumericPattern } from \"../utils.js\";\nimport { Parser } from \"../Parser.js\";\nimport { numericPatterns } from \"../constants.js\";\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // Day of the month\n\nexport class DateParser extends Parser {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"priority\", 90);\n    _defineProperty(this, \"subPriority\", 1);\n    _defineProperty(this, \"incompatibleTokens\", ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);\n  }\n  parse(dateString, token, match) {\n    switch (token) {\n      case 'd':\n        return parseNumericPattern(numericPatterns.date, dateString);\n      case 'do':\n        return match.ordinalNumber(dateString, {\n          unit: 'date'\n        });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n  validate(date, value) {\n    var year = date.getUTCFullYear();\n    var isLeapYear = isLeapYearIndex(year);\n    var month = date.getUTCMonth();\n    if (isLeapYear) {\n      return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n    } else {\n      return value >= 1 && value <= DAYS_IN_MONTH[month];\n    }\n  }\n  set(date, _flags, value) {\n    date.setUTCDate(value);\n    date.setUTCHours(0, 0, 0, 0);\n    return date;\n  }\n}","map":{"version":3,"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","isLeapYearIndex","parseNDigits","parseNumericPattern","Parser","numericPatterns","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","DateParser","constructor","arguments","parse","dateString","token","match","date","ordinalNumber","unit","length","validate","year","getUTCFullYear","isLeapYear","month","getUTCMonth","set","_flags","setUTCDate","setUTCHours"],"sources":["/Users/ksphdinhquy/Desktop/IT/checkinConUDSMP/node_modules/date-fns/esm/parse/_lib/parsers/DateParser.js"],"sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { isLeapYearIndex, parseNDigits, parseNumericPattern } from \"../utils.js\";\nimport { Parser } from \"../Parser.js\";\nimport { numericPatterns } from \"../constants.js\";\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // Day of the month\n\nexport class DateParser extends Parser {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"priority\", 90);\n\n    _defineProperty(this, \"subPriority\", 1);\n\n    _defineProperty(this, \"incompatibleTokens\", ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);\n  }\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case 'd':\n        return parseNumericPattern(numericPatterns.date, dateString);\n\n      case 'do':\n        return match.ordinalNumber(dateString, {\n          unit: 'date'\n        });\n\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    var year = date.getUTCFullYear();\n    var isLeapYear = isLeapYearIndex(year);\n    var month = date.getUTCMonth();\n\n    if (isLeapYear) {\n      return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n    } else {\n      return value >= 1 && value <= DAYS_IN_MONTH[month];\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setUTCDate(value);\n    date.setUTCHours(0, 0, 0, 0);\n    return date;\n  }\n\n}"],"mappings":"AAAA,SAASA,eAAeA,CAACC,GAAG,EAAEC,GAAG,EAAEC,KAAK,EAAE;EAAE,IAAID,GAAG,IAAID,GAAG,EAAE;IAAEG,MAAM,CAACC,cAAc,CAACJ,GAAG,EAAEC,GAAG,EAAE;MAAEC,KAAK,EAAEA,KAAK;MAAEG,UAAU,EAAE,IAAI;MAAEC,YAAY,EAAE,IAAI;MAAEC,QAAQ,EAAE;IAAK,CAAC,CAAC;EAAE,CAAC,MAAM;IAAEP,GAAG,CAACC,GAAG,CAAC,GAAGC,KAAK;EAAE;EAAE,OAAOF,GAAG;AAAE;AAEhN,SAASQ,eAAe,EAAEC,YAAY,EAAEC,mBAAmB,QAAQ,aAAa;AAChF,SAASC,MAAM,QAAQ,cAAc;AACrC,SAASC,eAAe,QAAQ,iBAAiB;AACjD,IAAIC,aAAa,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;AACpE,IAAIC,uBAAuB,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;;AAEhF,OAAO,MAAMC,UAAU,SAASJ,MAAM,CAAC;EACrCK,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,GAAGC,SAAS,CAAC;IAEnBlB,eAAe,CAAC,IAAI,EAAE,UAAU,EAAE,EAAE,CAAC;IAErCA,eAAe,CAAC,IAAI,EAAE,aAAa,EAAE,CAAC,CAAC;IAEvCA,eAAe,CAAC,IAAI,EAAE,oBAAoB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;EAC3G;EAEAmB,KAAKA,CAACC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAE;IAC9B,QAAQD,KAAK;MACX,KAAK,GAAG;QACN,OAAOV,mBAAmB,CAACE,eAAe,CAACU,IAAI,EAAEH,UAAU,CAAC;MAE9D,KAAK,IAAI;QACP,OAAOE,KAAK,CAACE,aAAa,CAACJ,UAAU,EAAE;UACrCK,IAAI,EAAE;QACR,CAAC,CAAC;MAEJ;QACE,OAAOf,YAAY,CAACW,KAAK,CAACK,MAAM,EAAEN,UAAU,CAAC;IACjD;EACF;EAEAO,QAAQA,CAACJ,IAAI,EAAEpB,KAAK,EAAE;IACpB,IAAIyB,IAAI,GAAGL,IAAI,CAACM,cAAc,CAAC,CAAC;IAChC,IAAIC,UAAU,GAAGrB,eAAe,CAACmB,IAAI,CAAC;IACtC,IAAIG,KAAK,GAAGR,IAAI,CAACS,WAAW,CAAC,CAAC;IAE9B,IAAIF,UAAU,EAAE;MACd,OAAO3B,KAAK,IAAI,CAAC,IAAIA,KAAK,IAAIY,uBAAuB,CAACgB,KAAK,CAAC;IAC9D,CAAC,MAAM;MACL,OAAO5B,KAAK,IAAI,CAAC,IAAIA,KAAK,IAAIW,aAAa,CAACiB,KAAK,CAAC;IACpD;EACF;EAEAE,GAAGA,CAACV,IAAI,EAAEW,MAAM,EAAE/B,KAAK,EAAE;IACvBoB,IAAI,CAACY,UAAU,CAAChC,KAAK,CAAC;IACtBoB,IAAI,CAACa,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC5B,OAAOb,IAAI;EACb;AAEF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}